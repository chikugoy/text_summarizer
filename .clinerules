# プロジェクトコーディング規約

## プロジェクト概要

### フロントエンド
- **フレームワーク**: Next.js
- **ビルドツール**: Vite
- **UIライブラリ**: Shadcn/ui
- **アーキテクチャ**: Atomic Design構成
- **フォーム管理**: React Hook Form + Zod
- **ルーティング**: React Router
- **状態管理**: Zustand/Jotai
- **スキーマ定義**: Zod
- **ロジック分離**: カスタムフック
- **デザインパターン**: サービスロケーターパターン

### バックエンド
- **フレームワーク**: FastAPI
- **言語**: Python

## コーディング規約

### フロントエンド

1. **TypeScript厳格化モード**:
   - `strict: true`を設定
   - `noImplicitAny: true`
   - `strictNullChecks: true`
   - `strictFunctionTypes: true`
   - `strictBindCallApply: true`
   - `strictPropertyInitialization: true`
   - `noImplicitThis: true`
   - `alwaysStrict: true`

2. **命名規則**:
   - **変数・関数**: キャメルケース (`myVariable`, `myFunction`)
   - **クラス・インターフェース**: パスカルケース (`MyClass`, `MyInterface`)
   - **定数**: 大文字スネークケース (`MY_CONSTANT`)
   - **ファイル名**: キャメルケース (`myService.ts`)
   - **コンポーネントファイル名**: パスカルケース (`Button.tsx`, `Header.tsx`)

3. **コメント**:
   - 複雑なロジックには必ずコメントを付ける
   - JSDoc形式を使用する
   - 日本語コメントを推奨

4. **インポート順序**:
   - 外部ライブラリ
   - 内部モジュール（相対パス）
   - 型定義
   - スタイル

5. **Atomic Design**:
   - `atoms/`: 最小単位のUIコンポーネント（Button, Input, Icon等）
   - `molecules/`: atomsを組み合わせた小さなコンポーネント（SearchBox, Card等）
   - `organisms/`: 複数のmoleculesとatomsで構成される大きなコンポーネント（Header, Footer等）
   - `templates/`: ページのレイアウト構造を定義
   - `pages/`: 実際のページコンポーネント

6. **コンポーネント**:
   - 関数コンポーネントのみ使用
   - Propsには必ず型定義
   - デフォルトエクスポートを使用

3. **スタイリング**:
   - Tailwind CSSを使用
   - `cn`ユーティリティを使用してクラス名を条件付きで結合
   - グローバルスタイルは最小限に抑える

4. **フォーム**:
   - React Hook Formを使用
   - バリデーションはZodで定義
   - スキーマは`/schemas`ディレクトリに配置

5. **状態管理**:
   - グローバル状態: Zustand
   - ローカル状態: React Hooks (useState, useReducer)
   - 派生状態: Jotai
   - コンテキストは最小限に抑える

6. **カスタムフック**:
   - ロジックは可能な限りカスタムフックに分離
   - フック名は`use`プレフィックスで始める
   - `/hooks`ディレクトリに配置

7. **API通信**:
   - サービスロケーターパターンを使用
   - `/services`ディレクトリに配置
   - エラーハンドリングを適切に実装

### バックエンド

1. **命名規則**:
   - **変数・関数**: スネークケース (`my_variable`, `my_function`)
   - **クラス**: パスカルケース (`MyClass`)
   - **定数**: 大文字スネークケース (`MY_CONSTANT`)
   - **ファイル名**: スネークケース (`my_module.py`)
   - **プライベート変数/メソッド**: アンダースコア接頭辞 (`_private_var`)

2. **FastAPI構造**:
   - ルーター、モデル、スキーマ、依存関係の適切な分離
   - Pydanticモデルを活用したデータバリデーション
   - 依存性注入システムを活用

2. **API設計**:
   - RESTful原則に従う
   - エンドポイントは名詞を使用 (`/users`, `/videos`)
   - HTTPメソッドを適切に使用 (GET, POST, PUT, DELETE)
   - レスポンスは一貫した形式で返す

3. **バリデーション**:
   - DTOにはクラスバリデーターを使用
   - 入力値は必ず検証

4. **エラーハンドリング**:
   - 適切な例外クラスを使用
   - エラーレスポンスは統一フォーマット

5. **環境変数**:
   - `.env`ファイルを使用
   - 機密情報はコミットしない
   - 環境変数の型定義

## ディレクトリ構造

### フロントエンド
```
client/
├── public/
├── src/
│   ├── assets/
│   ├── components/
│   │   ├── atoms/
│   │   ├── molecules/
│   │   ├── organisms/
│   │   ├── templates/
│   │   └── pages/
│   ├── hooks/
│   ├── services/
│   ├── store/
│   ├── types/
│   ├── utils/
│   ├── schemas/
│   ├── App.tsx
│   └── main.tsx
└── ...
```

### バックエンド
```
server/
├── main.py
├── requirements.txt
├── app/
│   ├── __init__.py
│   ├── config.py
│   ├── database.py
│   ├── dependencies.py
│   ├── models/
│   │   ├── __init__.py
│   │   └── *.py
│   ├── schemas/
│   │   ├── __init__.py
│   │   └── *.py
│   ├── api/
│   │   ├── __init__.py
│   │   ├── endpoints/
│   │   │   ├── __init__.py
│   │   │   └── *.py
│   │   └── routes.py
│   ├── services/
│   │   ├── __init__.py
│   │   └── *.py
│   └── utils/
│       ├── __init__.py
│       └── *.py
└── tests/
    ├── __init__.py
    └── test_*.py
```

## テスト

1. **フロントエンド**:
   - Jest + React Testing Libraryを使用
   - コンポーネントテスト
   - カスタムフックテスト
   - 統合テスト

2. **バックエンド**:
   - Pytestを使用
   - ユニットテスト
   - 統合テスト
   - E2Eテスト

## Git規約

1. **ブランチ命名**:
   - 機能追加: `feature/機能名`
   - バグ修正: `fix/バグ名`
   - リファクタリング: `refactor/内容`
   - ドキュメント: `docs/内容`

2. **コミットメッセージ**:
   - 先頭に種類を記載: `feat:`, `fix:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:`
   - 日本語で簡潔に内容を記述

3. **プルリクエスト**:
   - タイトルは変更内容を簡潔に
   - 説明には変更理由と影響範囲を記載
   - レビュアーを指定

## パフォーマンス最適化

1. **フロントエンド**:
   - メモ化 (`useMemo`, `useCallback`, `memo`)
   - コード分割
   - 画像最適化
   - バンドルサイズの監視

2. **バックエンド**:
   - キャッシュ戦略
   - データベースクエリの最適化
   - 非同期処理の適切な使用
